"""
Django settings for mesaky_backend project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import json
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
from core.config.load_secrets import get_secret

load_dotenv()

secrets = json.loads(get_secret(secret_name="DJANGO_SECRET_KEY"))
db_secrets = json.loads(get_secret(secret_name="ZORY-DATABASE")) if os.getenv("ENVIRONMENT") == "PROD" else json.loads(get_secret(secret_name="ZORY-DATABASE-STAGE"))
pine_secrets = json.loads(get_secret(secret_name="MESAKY-VECTOR-DB"))

PINECONE_STAGE_INDEX = pine_secrets['PINECONE_INDEX_NAME_STAGE']
PINECONE_PROD_INDEX =  pine_secrets['PINECONE_INDEX_NAME_PROD']

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = secrets["DJANGO_SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False if os.getenv("ENVIRONMENT") == "PROD" else True

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

ALLOWED_HOSTS = ["*"]

SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# Application definition
INSTALLED_APPS = [
    "channels",
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework_simplejwt",
    "rest_framework",
    "drf_yasg",
    "account",
    "core",
    "storages",
    "django_countries",
    "rest_framework_simplejwt.token_blacklist"
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

AUTH_USER_MODEL = "account.User"

ROOT_URLCONF = "mesaky_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "mesaky_backend/templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

ASGI_APPLICATION = "mesaky_backend.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
}

WSGI_APPLICATION = "mesaky_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": f"django.db.backends.postgresql",
        "NAME": db_secrets["username"],
        "USER": db_secrets["username"],
        "PASSWORD": db_secrets["password"],
        "HOST": db_secrets["host"],
        "PORT": db_secrets["port"],
    }
}


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "account.authentication.CustomJWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

AWS_S3_OBJECT_PARAMETERS = {
    "CacheControl": "max-age=86400",
    "ContentType": "application/octet-stream",
}
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            "bucket_name": f"{os.getenv('AWS_STORAGE_BUCKET_NAME')}",
            "location": "media",
        },
    },
    "staticfiles": {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            "bucket_name": f"{os.getenv('AWS_STORAGE_BUCKET_NAME')}",
            "location": "static",
        },
    },
}


STATIC_URL = f"https://{os.getenv('AWS_STORAGE_BUCKET_NAME')}.s3.{os.getenv('AWS_S3_REGION_NAME')}.amazonaws.com/static/"
MEDIA_URL = f"https://{os.getenv('AWS_STORAGE_BUCKET_NAME')}.s3.{os.getenv('AWS_S3_REGION_NAME')}.amazonaws.com/media/"

# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# STATIC_URL = '/static/'
#
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Or allow all origins (not recommended for production)
CORS_ALLOW_ALL_ORIGINS = True


secrets = json.loads(get_secret(secret_name="STRIPE_SECRETS"))

STRIPE_PUBLIC_KEY = secrets["STRIPE_PUBLIC_KEY"]
STRIPE_SECRET_KEY = secrets["STRIPE_SECRET_KEY"]
STRIPE_WEBHOOK_KEY = secrets["STRIPE_WEBHOOK_KEY"]
FRONTEND_URL = (
    "https://merchant.zory.ai"
    if os.getenv("ENVIRONMENT") == "PROD"
    else "https://stage.d1ydxt5ss8a3cy.amplifyapp.com"
)
APP_URL = 'https://api.zory.ai'
ANALYTICS_PREFIX= (
    "analytics-prod/"
    if os.getenv("ENVIRONMENT") == "PROD"
    else "analytics/"
)
MAX_IMAGE_SIZE = 5 * 1024 * 1024

google_secrets = json.loads(get_secret(secret_name="GOOGLE_API_KEYS"))

GOOGLE_CLIENT_ID = google_secrets["GOOGLE_CLIENT_ID"]
GOOGLE_CLIENT_SECRET = google_secrets["GOOGLE_CLIENT_SECRET"]

hyperpay_secrets = json.loads(get_secret(secret_name="HYPERPAY_KEYS_STAGE"))
AUTH_TOKEN = hyperpay_secrets["AUTH_TOKEN"]
ENTITY_ID = hyperpay_secrets["ENTITY_ID"]
ENTITY_ID_3DS = hyperpay_secrets["ENTITY_ID_3DS"]
HYPERPAY_URL = hyperpay_secrets["HYPERPAY_URL"]
